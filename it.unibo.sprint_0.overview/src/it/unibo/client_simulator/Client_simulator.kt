/* Generated by AN DISI Unibo */ 
package it.unibo.client_simulator

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client_simulator ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		 		var nClientSimulated = 0
		 		val totalClient = 1	
		 		var timeToWait  = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& CLIENT SIMULATOR | starts &&&&&")
					}
					 transition( edgeName="goto",targetState="ringBell", cond=doswitch() )
				}	 
				state("ringBell") { //this:State
					action { //it:State
						 readLine  
						println("&&&&& NEW CLIENT: RING THE SMARTBELL &&&&&")
						 nCLientSimulated ++  
						request("ring", "ring(0)" ,"smartbell" )  
					}
					 transition(edgeName="t08",targetState="checkAnswer",cond=whenReply("waiterResponse"))
					transition(edgeName="t09",targetState="refused",cond=whenReply("refused"))
				}	 
				state("refused") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("refused(CAUSE)"), Term.createTerm("refused(CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&&& CLIENT | I've been refused for this cause: ${payloadArg(0)}. &&&&&")
						}
					}
					 transition( edgeName="goto",targetState="ringBell", cond=doswitchGuarded({ nClientSimulated <= totalClient  
					}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! ( nClientSimulated <= totalClient  
					) }) )
				}	 
				state("checkAnswer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waiterResponse(CID,TIME)"), Term.createTerm("waiterResponse(CID,TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 timeToWait = ${payloadArg(0)}.toInt()  
								if(  timeToWait == 0  
								 ){delay(5000) 
								}
								else
								 {println("&&&&& CLIENT ${payloadArg(1)} | Maybe I'll return later. &&&&&")
								 }
						}
					}
					 transition( edgeName="goto",targetState="ringBell", cond=doswitchGuarded({ nClientSimulated <= totalClient  
					}) )
					transition( edgeName="goto",targetState="end", cond=doswitchGuarded({! ( nClientSimulated <= totalClient  
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("&&&&& All clients simulated, BYE! &&&&&")
						terminate(0)
					}
				}	 
			}
		}
}
