/*
 * SPRINT_0-OVERVIEW INIZIALE
 * Modello derivante dall'analisi dei Requisiti fatta nell'overview iniziale (sprint0).
 */

 System tearoom_covid19_sprint0

 /* MESSAGGI */

 /*--------waiter <-> smartbell -------- */
 Request enterRequest : enterRequest(CID)
 Reply 	 answer 	  : answer(TIME)	// TIME = 0 significa che la richiesta del cliente viene accettata e il waiter sta arrivando ad accoglierlo altrimenti TIME rappresenta il maxWaitingTime da aspettare perch� la sala � piena

 /*--------waiter <-> barman ----------- */
 Dispatch order 	   : order (ARG)
 Dispatch orderReady : orderReady (ARG)


 /*--------situationObserver <-> browser -------- */
 Request askForSituation  : askForSituation(ARG)	//Messaggio proveniente dall'esterno del sistema.
 Reply 	 currentSituation : currentSituation(SITUATION)

 /* Ulteriori messaggi UTILI AI FINI DELLA SIMULAZIONE */

 /*--------waiter <-> client ----------- */
 Request readyToOrder : readyToOrder(CID)
 Reply 	 imHere 	    : imhere(N)
 Request readyToPay   : readyToPay(CID)
 Reply   amountToPay  : amountToPay(AMOUNT)

 /*--------client <-> smartbell -------- */
 Request ring 		    : ring(N)
 Reply waiterResponse : waiterResponse(CID, TIME)
 Reply refused 		    : refused(CAUSE)


 /*CONTESTI*/

 Context ctxTearoom	 	    ip [ host='localhost'  port=9000 ] // Al momento uno solo per semplicità di testing
// Context ctxWaiter 		  ip 	[ host='somehost1' port=9001 ]
// Context ctxSmartbell 	ip	[ host='somehost2' port=9002 ]
// Context ctxServiceDesk	ip	[ host='somehost3' port=9003 ]

 /* ATTORI: Waiter, Barman, Smartbell */

 /* WAITER */
 QActor waiter context ctxTearoom {
 	[#
 		var NTableAvailable  = 2
 	 	val MaxStayTime      = ??
    var MaxWaitingTime   = ??
    var CurrentSituation = ??
 	 #]

 	State s0 initial{
 		println("&&&&& waiter | starts")
 		delay 6000
 	}
 	Goto waitForRequest

 	State waitForRequest{
 		println("&&&&& waiter | waiting for any kind of requests...")
 	}
 	Transition t0
 					whenRequest  enterRequest -> evaluateEntrance
 					whenRequest	 readyToOrder -> takeOrder
 					whenMsg		   orderReady	  -> serveClient
 					whenRequest	 readyToPay   -> collectPayment

 	State evaluateEntrance{
 			//TODO: Check the availability of the teatable in state tableclean
 		}
 	}
 	Goto accept if [# NTableAvailable >= 1 #] else inform

 	State accept{   //TASK ACCEPT
 		//TODO: Occupy one teatable
 		replyTo enterRequest with answer : answer(0)
 	}
 	Goto reachEntranceDoor

 	State reachEntranceDoor{  //TASK REACH
 	}
 	Goto convoyToTable

 	State convoyToTable{    //TASK CONVOYTOTABLE
 	}
 	Goto waitForRequest

 	State inform{         //TASK INFORM
 		replyTo enterRequest with answer : answer($MaxStayTime)
 	}
 	Goto waitForRequest

 	State takeOrder{    //TASK TAKE
 			//TODO: reach the table of the client
 			replyTo readyToOrder with imHere : imHere(imHere)
 			forward barman -m order : order(ARG)
 	}
 	Goto waitForRequest

 	State serveClient{    //TASK SERVE
 	}
 	Goto waitForRequest

 	State collectPayment{   //TASK COLLECT
  //reach the client table
 	}
 	Goto convoyToExit

 	State convoyToExit{   //TASK CONVOYTOEXIT
 	}
 	Goto clean

 	State clean{      //TASK CLEAN
 	}
 	Goto waitForRequest

 	State rest{     //TASK REST
 	}
 	Transition t0 	whenRequest  enterRequest -> evaluateEntrance
 					        whenRequest	 readyToOrder -> takeOrder
 					        whenMsg		   orderReady   -> serveClient
 					        whenRequest	 readyToPay   -> collectPayment
 }





 /* SMARTBELL */
 QActor smartbell context ctxTearoom{
 	[#
 		var CurrentBodyTemperature = 36
 		var CurrentClientID = 0
 		var TimeToWait : Int
 	#]
 	 State s0 initial{
 		println("&&&&& smartbell | starts")
 	}
 	Goto listening

 	State listening{
 		println("&&&&& smartbell | listening to ringing...")
 	}
 	Transition t0 	whenRequest ring -> checkClient

 	State checkClient{
 			//TODO: simulate a temperature rilevation
 	}
 	Goto doEnterReq if [# CurrentBodyTemperature < 37.5 #] else refuseClient

 	State doEnterReq{
 		[# CurrentClientID ++ #]
 		request waiter -m enterRequest : enterRequest($CurrentClientID)
 		delay 6000
 	}
 	Transition t0 whenReply answer -> showAnswer

 	State showAnswer{
			replyTo ring with waiterResponse : waiterResponse($CurrentClientID, $TimeToWait)		//Ai fini della simulazione, diamo una risposta al cliente

 		  replyTo ring with waiterResponse : waiterResponse($CurrentClientID, $TimeToWait)		//Ai fini della simulazione, diamo una risposta al cliente
 	}
 	Goto listening

 	State refuseClient{
   	  replyTo ring with refused : refused(HighBodyTemperature)
 	}
 	Goto listening
 }




 /* BARMAN */
 QActor barman context ctxTearoom{
 	 State s0 initial{

 	}
 	Goto waitForOrder

 	State waitForOrder{

 	}
 	Transition t0 whenMsg order -> prepare

 	State prepare{
 			forward waiter -m orderReady : orderReady(ARG)
 	}
 	Goto waitForOrder
 }



 /* CLIENT SIMULATOR */
 QActor client_simulator context ctxTearoom{
 	[#
 		var TimeToWait = 0
 		var ClientId = 0
 	#]
 	State s0 initial{
 		println("&&&&& CLIENT SIMULATOR | starts")
 		delay 1000
 	}
 	Goto ringBell

 	State ringBell{
 		println("PRESS ENTER TO SIMULATE THE ARRIVE OF A CLIENT")
 		[# readLine() #]
 		println("&&&&& NEW CLIENT: RING THE SMARTBELL")
 		request smartbell -m ring : ring(0)
 	}
 	Transition t0 whenReply waiterResponse  ->  	checkAnswer
 				        whenReply refused 	      ->	refused

 	State refused{
 	}
 	Goto end

 	State checkAnswer{
 		onMsg(waiterResponse : waiterResponse(CID, TIME)){
 			[#
 				ClientId = 	payloadArg(0).toInt()
 				TimeToWait = payloadArg(1).toInt()
 			#]
 		}
 	}
 	Goto reachTable	if [# TimeToWait == 0 #] else returnLater

 	State reachTable{
 	//Wait the waiter and follow it to the teatable
 	}
 	Goto consultMenuAndOrder

 	State consultMenuAndOrder{
 		//consult the men�...
 		request waiter -m readyToOrder : readyToOrder($ClientId)
 	}
 	Transition t0 whenReply imHere -> waitAndConsume

 	State waitAndConsume{
 	  //waiting for the tea and consume it
 		request waiter -m readyToPay : readyToPay($ClientId)
 	}
 	Transition t0 whenReply amountToPay -> pay

 	State pay{
 	}
 	Goto end

 	State returnLater{
 	}
 	Goto end

 	State end{
 		println("&&&&& CLIENT | BYE, BYE!")
 		terminate 1
 	}
 }



 /* SITUATION OBSERVER */
 QActor situation_observer context ctxTearoom{
 	State s0 initial{

 	}
 	Goto waiting

 	State waiting{

 	}
 	Transition t0 whenRequest askForSituation -> observeSituation

 	State observeSituation{
 		//TODO: Collect informations about current situation of the TeaRoom
 		replyTo askForSituation with currentSituation : currentSituation(SITUATION)
 	}
 	Goto waiting
 }
