/* Generated by AN DISI Unibo */ 
package it.unibo.client_simulator

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client_simulator ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		 		var TimeToWait : Int
		 		var ClientId = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& CLIENT SIMULATOR | starts")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="ringBell", cond=doswitch() )
				}	 
				state("ringBell") { //this:State
					action { //it:State
						println("PRESS ENTER TO SIMULATE THE ARRIVE OF A CLIENT")
						 readLine()  
						println("&&&&& NEW CLIENT: RING THE SMARTBELL")
						request("ring", "ring(0)" ,"smartbell" )  
					}
					 transition(edgeName="t012",targetState="checkAnswer",cond=whenReply("waiterResponse"))
					transition(edgeName="t013",targetState="refused",cond=whenReply("refused"))
				}	 
				state("refused") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("refused(CAUSE)"), Term.createTerm("refused(CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&&& CLIENT | I've been refused for this cause: ${payloadArg(0)}.")
						}
					}
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("checkAnswer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waiterResponse(CID,TIME)"), Term.createTerm("waiterResponse(CID,TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								 				ClientId = 	payloadArg(0).toInt()
								 				TimeToWait = payloadArg(1).toInt() 
						}
					}
					 transition( edgeName="goto",targetState="reachTable", cond=doswitchGuarded({ TimeToWait == 0  
					}) )
					transition( edgeName="goto",targetState="returnLater", cond=doswitchGuarded({! ( TimeToWait == 0  
					) }) )
				}	 
				state("reachTable") { //this:State
					action { //it:State
						delay(5000) 
					}
					 transition( edgeName="goto",targetState="consultMenuAndOrder", cond=doswitch() )
				}	 
				state("consultMenuAndOrder") { //this:State
					action { //it:State
						println("&&&&& CLIENT | Consulting the menù...")
						delay(2000) 
						println("&&&&& CLIENT | I'm ready to order.")
						request("readyToOrder", "readyToOrder($ClientId)" ,"waiter" )  
					}
					 transition(edgeName="t014",targetState="waitAndConsume",cond=whenReply("imHere"))
				}	 
				state("waitAndConsume") { //this:State
					action { //it:State
						delay(5000) 
						request("readyToPay", "readyToPay($ClientID)" ,"waiter" )  
					}
					 transition(edgeName="t015",targetState="pay",cond=whenReply("amountToPay"))
				}	 
				state("pay") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("amountToPay(AMOUNT)"), Term.createTerm("amountToPay(AMOUNT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&&& CLIENT | I pay ${payloadArg(0)}")
						}
					}
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("returnLater") { //this:State
					action { //it:State
						println("&&&&& CLIENT ID $ClientID | Maybe I'll return later.")
					}
					 transition( edgeName="goto",targetState="end", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						println("&&&&& CLIENT | BYE, BYE!")
						terminate(0)
					}
				}	 
			}
		}
}
