/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& barman | starts &&&&&")
					}
					 transition( edgeName="goto",targetState="waitForOrder", cond=doswitch() )
				}	 
				state("waitForOrder") { //this:State
					action { //it:State
						println("&&&&& barman | waiting for orders... &&&&&")
					}
					 transition(edgeName="t011",targetState="prepare",cond=whenDispatch("order"))
				}	 
				state("prepare") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("order(CID,TEA)"), Term.createTerm("order(CID,TEA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&&& barman | preparing the order of ${payloadArg(1)} for client ${payloadArg(0)}. &&&&&")
								delay(2000) 
						}
					}
					 transition( edgeName="goto",targetState="waitForOrder", cond=doswitch() )
				}	 
			}
		}
}
