/*
 * SPRINT_0
 * Modello derivante dall'analisi del Problema fatta nell'overview iniziale (sprint0).
 */
 
 System tearoom_covid19

 /* Messaggi */
 
 /*--------waiter <-> smartbell -------- */
 Request enterRequest : enterRequest(CID)
 Reply 	 answer 	  : answer(TIME)	/* TIME = 0 significa che la richiesta del cliente viene accettata e il waiter sta arrivando ad accoglierlo
  										 * altrimenti TIME rappresenta il maxWaitingTime da aspettare perchè la sala è piena
  										 */
 
 /*--------waiter <-> barman ----------- */
 Dispatch order 	 : order(CID, TEA)
 Dispatch orderReady : orderReady(CID, TEA)
 
 /*--------waiter <-> client ----------- */ /* UTILI AI FINI DELLA SIMULAZIONE */
 Request readyToOrder : readyToOrder(CID)
 Reply 	 imHere 	  : imhere(N)
 Request readyToPay   : readyToPay(CID)
 Reply   amountToPay  : amountToPay(AMOUNT)

 /*--------client <-> smartbell -------- */	/* UTILI AI FINI DELLA SIMULAZIONE */
 Request ring 		  : ring(N)
 Reply waiterResponse : waiterResponse(CID, TIME)
 Reply refused 		  : refused(CAUSE)
 
 /*--------situationObserver <-> browser -------- */
 Request askForSituation  : askForSituation(N)
 Reply 	 currentSituation : currentSituation(SITUATION)
 
 Context ctxTearoom		ip 	[ host='localhost' port=9000 ]
 Context ctxWaiter 		ip 	[ host='somehost1' port=9001 ]
 Context ctxSmartbell 	ip	[ host='somehost2' port=9002 ]
 Context ctxServiceDesk	ip	[ host='somehost3' port=9003 ]
 
 /* Attori */
 QActor waiter context ctxTearoom {
 	[# 
 		var NTableAvailable = 2
 	 	val MaxStayTime = 10000L
 	 	TimeToRest = 12000L
 	 #]
 	
 	State s0 initial{
 		discardMsg Off
 		println("&&&&& waiter | starts")
 		delay 6000
 	}
 	Goto waitForRequest
 	
 	State waitForRequest{
 		println("&&&&& waiter | waiting for any kind of requests...")
 	}
 	Transition t0 	whenTimeVar  TimeToRest   -> rest
 					whenRequest  enterRequest -> evaluateEntrance
 					whenRequest	 readyToOrder -> takeOrder
 					whenMsg		 orderReady	  -> serveClient
 					whenRequest	 readyToPay   -> collectPayment
 					
 	State evaluateEntrance{
 		onMsg( enterRequest : enterRequest(CID) ){
 			println("&&&&& waiter | evaluating the enterRequest of the client ID = ${payloadArg(0)} ")
 			//TODO: Check the availability of the teatable in state tableclean
 		}
 		delay 6000
 	}
 	Goto accept if [# NTableAvailable >= 1 #] else inform
 	
 	State accept{
 		println("&&&&& waiter | EnterRequest accepted.")
 		//TODO: Occupy one teatable in state tableclean with the current client_id
 		replyTo enterRequest with answer : answer(0)
 	}
 	Goto reachEntranceDoor
 	
 	State reachEntranceDoor{
 		println("&&&&& waiter | I'm going to the entrance door...")
 		delay 6000
 	}
 	Goto convoyToTable
 	
 	State convoyToTable{
 		println("&&&&& waiter | Follow me to the table...")
 		//TODO: When the client reach the table we start the maxStayTime countdown for that client
 		delay 6000	
 	}
 	Goto waitForRequest
 	
 	State inform{
 		println("&&&&& waiter | Sorry, at the moment the TeaRoom is full. Retry in ${MaxStayTime/1000} seconds.")
 		//TODO: Occupy one teatable in state tableclean with the current client_id
 		replyTo enterRequest with answer : answer($MaxStayTime)
 		delay 6000
 	}
 	Goto waitForRequest
 	
 	State takeOrder{
 		onMsg(readyToOrder : readyToOrder (CID)){
 			//TODO: reach the table of the client
 			println("&&&&& waiter | I'm reaching the table, taking the order of client ${payloadArg(0)} and transmitting it to barman.")
 			replyTo readyToOrder with imHere : imHere(imHere)
 			delay 1000
 			forward barman -m order : order( $payloadArg(0), LemonTea)
 			delay 6000  
 		}
 	}
 	Goto waitForRequest
 	
 	State serveClient{
 		onMsg(orderReady : orderReady (CID, TEA)){
 			println("&&&&& waiter | I'm going to barman, taking the ${payloadArg(1)} for the client ${payloadArg(0)} and serving it at the table.")
 			delay 6000
 		}
 	}
 	Goto waitForRequest
 	
 	State collectPayment{
 		println("&&&&& waiter | I'm going to the table of client ${payloadArg(0)} and collect the payment.")
 		delay 6000 //reach the client table
 		replyTo readyToPay with amountToPay : amountToPay(4)
 	}
 	Goto convoyToExit
 	
 	State convoyToExit{
 		println("&&&&& waiter | Follow me to the exit door...Bye,Bye!")
 		delay 6000
 	}
 	Goto clean
 	
 	State clean{
 		println("&&&&& waiter | I'm cleaning the table!")
 	}
 	Goto waitForRequest
 		
 	State rest{
 		println("&&&&& waiter | I'm going to return to home and relax.")
 	}
 	Transition t0 	whenRequest  enterRequest -> evaluateEntrance
 					whenRequest	 readyToOrder -> takeOrder
 					whenMsg		 orderReady	  -> serveClient
 					whenRequest	 readyToPay   -> collectPayment			
 }
 
 QActor smartbell context ctxTearoom{
 	[#
 		var CurrentBodyTemperature = 36
 		var CurrentClientID = 0
 		var TimeToWait : Int
 			
 	#]
 	 State s0 initial{
 		println("&&&&& smartbell | starts")
 	}
 	Goto listening
 	
 	State listening{
 		println("&&&&& smartbell | listening to ringing...")
 	}
 	Transition t0 	whenRequest ring -> checkClient
 	
 	State checkClient{
 		onMsg(ring : ring(N) ){
 			println("&&&&& smartbell | DRIIN !! Let's control the body temperature...")
 			delay 6000
 			//TODO: simulate a temperature rilevation	
 		}
 	}
 	Goto doEnterReq if [# CurrentBodyTemperature < 37.5 #] else refuseClient
 	
 	State doEnterReq{
 		[# CurrentClientID ++ #]
 		println("&&&&& smartbell | Forward the entranceRequest for client $CurrentClientID.")
 		request waiter -m enterRequest : enterRequest($CurrentClientID)
 		delay 6000
 	}
 	Transition t0 whenReply answer -> showAnswer
 	
 	State showAnswer{
 		onMsg(answer : answer (TIME)){
 			[# TimeToWait = payloadArg(0).toString().toInt() #]
 			if [# TimeToWait == 0 #] {
 				println("&&&&& smartbell | Welcome! The waiter is coming to get you.")
 				replyTo ring with waiterResponse : waiterResponse($CurrentClientID, $TimeToWait)		//Ai fini della simulazione, diamo una risposta al cliente
 			}else{
 				println("&&&&& smartbell | The teaRoom is full! Retry in ${TimeToWait/1000} seconds.")
 				replyTo ring with waiterResponse : waiterResponse($CurrentClientID, $TimeToWait)		//Ai fini della simulazione, diamo una risposta al cliente
 				//WARNING: When this client will return the smartbell will assign him/her a new ID.
 			}
 		} 
 	}
 	Goto listening
 	
 	State refuseClient{
 		println("&&&&& smartbell | I'm sorry! You're not allowed to enter cause your body temperature is high.")
 		replyTo ring with refused : refused(HighBodyTemperature)
 	}
 	Goto listening
 }
 
 
 QActor barman context ctxTearoom{
 	 State s0 initial{
 		println("&&&&& barman | starts")
 	}
 	Goto waitForOrder
 	
 	State waitForOrder{
 		println("&&&&& barman | waiting for orders...")
 	}
 	Transition t0 whenMsg order -> prepare
 	
 	State prepare{
 		onMsg(order : order(CID, TEA)){
 			println("&&&&& barman | preparing the order of ${payloadArg(1)} for client ${payloadArg(0)}.")
 			delay 6000
 		}
 	}
 	Goto waitForOrder
 }
 
 QActor client_simulator context ctxTearoom{
 	[#
 		var TimeToWait = 0
 		var ClientId = 0
 	#] 
 	State s0 initial{
 		println("&&&&& CLIENT SIMULATOR | starts")
 		delay 1000
 	}
 	Goto ringBell
 	
 	State ringBell{
 		println("PRESS ENTER TO SIMULATE THE ARRIVE OF A CLIENT")
 		[# readLine() #]
 		println("&&&&& NEW CLIENT: RING THE SMARTBELL")
 		request smartbell -m ring : ring(0) 
 	}
 	Transition t0 whenReply waiterResponse ->  	checkAnswer
 				  whenReply refused 	   ->	refused
 	
 	State refused{
 		onMsg(refused : refused(CAUSE)){
 			println("&&&&& CLIENT | I've been refused for this cause: ${payloadArg(0)}.")
 		}
 	}
 	Goto end
 	
 	State checkAnswer{
 		onMsg(waiterResponse : waiterResponse(CID, TIME)){
 			[# 
 				ClientId = 	payloadArg(0).toInt()
 				TimeToWait = payloadArg(1).toInt() 
 			#]
 		}
 	}
 	Goto reachTable	if [# TimeToWait == 0 #] else returnLater

 	State reachTable{
 		delay 5000 //Wait the waiter and follow it to the teatable
 	}
 	Goto consultMenuAndOrder
 	
 	State consultMenuAndOrder{
 		println("&&&&& CLIENT | Consulting the menù...")
 		delay 2000 //consult the menù...
 		println("&&&&& CLIENT | I'm ready to order.")
 		request waiter -m readyToOrder : readyToOrder($ClientId)
 	}
 	Transition t0 whenReply imHere -> waitAndConsume
 
 	State waitAndConsume{
 		delay 5000	//waiting for the tea and consume it
 		request waiter -m readyToPay : readyToPay($ClientId) 		
 	}
 	Transition t0 whenReply amountToPay -> pay
 	
 	State pay{
 		onMsg(amountToPay : amountToPay(AMOUNT)){
 			println("&&&&& CLIENT | I pay ${payloadArg(0)}")	
 		}
 	}
 	Goto end
 	
 	State returnLater{
 		println("&&&&& CLIENT ID $ClientId | Maybe I'll return later.")
 	}
 	Goto end
 	
 	State end{
 		println("&&&&& CLIENT | BYE, BYE!")
 		terminate 0
 	}
 }
 
 QActor situation_observer context ctxWaiter{
 	State s0 initial{
 		
 	}
 	Goto waiting
 	
 	State waiting{
 		
 	}
 	Transition t0 whenRequest askForSituation -> observeSituation
 	
 	State observeSituation{
 		//TODO: Collect informations about current situation of the TeaRoom
 		replyTo askForSituation with currentSituation : currentSituation(SITUATION)
 	}
 	Goto waiting
 }