/* Generated by AN DISI Unibo */ 
package it.unibo.smartbell

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartbell ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		 		var CurrentBodyTemperature = 36
		 		var CurrentClientID = 1
		 		var TimeToWait : Int
		 			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& smartbell | starts &&&&&")
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("listening") { //this:State
					action { //it:State
						println("&&&&& smartbell | listening to ringing... &&&&&")
					}
					 transition(edgeName="t09",targetState="checkClient",cond=whenRequest("ring"))
				}	 
				state("checkClient") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ring(N)"), Term.createTerm("ring(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("&&&&& smartbell | DRIIN !! Let's control the body temperature... &&&&&")
								 readLine()  
						}
					}
					 transition( edgeName="goto",targetState="doEnterReq", cond=doswitchGuarded({ CurrentBodyTemperature < 37.5  
					}) )
					transition( edgeName="goto",targetState="refuseClient", cond=doswitchGuarded({! ( CurrentBodyTemperature < 37.5  
					) }) )
				}	 
				state("doEnterReq") { //this:State
					action { //it:State
						println("&&&&& smartbell | Forward the entranceRequest for client $CurrentClientID. &&&&&")
						request("enterRequest", "enterRequest($CurrentClientID)" ,"waiter" )  
						 CurrentClientID ++  
					}
					 transition(edgeName="t010",targetState="showAnswer",cond=whenReply("answer"))
				}	 
				state("showAnswer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("answer(TIME)"), Term.createTerm("answer(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TimeToWait = payloadArg(0).toString().toInt()  
								if(  TimeToWait == 0  
								 ){println("&&&&& smartbell | Welcome! The waiter is coming to get you. &&&&&")
								answer("ring", "waiterResponse", "waiterResponse($CurrentClientID,$TimeToWait)"   )  
								}
								else
								 {println("&&&&& smartbell | The teaRoom is full! Retry in ${TimeToWait/1000} seconds. &&&&&")
								 answer("ring", "waiterResponse", "waiterResponse($CurrentClientID,$TimeToWait)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("refuseClient") { //this:State
					action { //it:State
						println("&&&&& smartbell | I'm sorry! You're not allowed to enter cause your body temperature is high. &&&&&")
						answer("ring", "refused", "refused(HighBodyTemperature)"   )  
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
			}
		}
}
