System tearoom_covid19_sprint3
mqttBroker "localhost" : 1883 eventTopic "unibo/polar" 

 /* Messaggi */
 
 /* From waiterlogic */
 Event local_startMaxstaytimeObserver : local_startMaxstaytimeObserver(MAXSTAYTIME)

 /* LOCAL EVENT EMITTED BY waiterlogic */
 Event local_consulting  : local_consulting (CID, TIME)
 Event local_consuming   : local_consuming  (CID, TIME)
 Event local_preparation : local_preparation(CID, TIME)
 Event local_leaving	 : local_leaving	(CID)
 
 Dispatch maxStayTime    : maxStayTime(CID, STATE)

 Context ctxwaiter	ip [ host="localhost"  port=8050 ]
 
 CodedQActor waiterlogic context ctxwaiter className "it.unibo.Waiterlogic"    

QActor maxstaytimeobserver context ctxwaiter{
	[#
		var MaxStayTime		= 0L
		var CurrentClientId = 0
		var Elapsed 		= 0L
		var NewTime		    = 0L
		var NClientOver	    = 0
		var List  		    = ""
		var ListClientOver  = ""
		var ClientState		= ""			   
		var CurrentTime	    = 0L	
	#]
	State s0 initial{
		solve( consult("clientsituationkb.pl")	 )
		solve( consult("sysRules.pl") )
	}
	Transition t0 whenEvent local_startMaxstaytimeObserver -> start
	
	State start{
		onMsg(local_startMaxstaytimeObserver : local_startMaxstaytimeObserver(MAXSTAYTIME)){
			[# 
			   MaxStayTime = payloadArg(0).toString().toLong()
			 #]
			
		}
		//println("MAX STAY TIME: $MaxStayTime")
	} Goto observing
	
	State observing{
		//CONTROLLIAMO CHE IL TEMPO DI PERMANENZA NON ECCEDA MAXSTAYTIME
		//println("I'm observing the client situation...")
		solve( clientAndTimesToControl(LIST) )
		ifSolved{
			[# List = getCurSol("LIST").toString() #]
			//println("list $List")
			memoCurrentTime CurrentTime
			solve( getClientOverTime($MaxStayTime, $CurrentTime, $List, RES) )
			ifSolved{
				[#  ListClientOver = getCurSol("RES").toString() #]
					solve( length($ListClientOver, L))
					//println("Current time: $CurrentTime")
					//println("List of client over: $ListClientOver")
				[#	NClientOver = getCurSol("L").toString().toInt()
					for(I in 1..NClientOver){ #]
						solve( arg($I, $ListClientOver, CID) )
				[#		CurrentClientId  = getCurSol("CID").toString().toInt() #]
						solve( client($CurrentClientId, STATE, _) )
				[#		ClientState = getCurSol("STATE").toString() #]
						//println("$CurrentClientId, $ClientState")
				      	forward waiterlogic -m maxStayTime : maxStayTime($CurrentClientId, $ClientState)
						//forward tester -m maxStayTime : maxStayTime($CurrentClientId, $ClientState)
						solve( removeRule(client($CurrentClientId, S, T)) )
						solve( removeRule(elapsed($CurrentClientId, T)) )
				[#	}	#]
				
				//println("=======================================================================")
				}				
			}
	} 
	Transition t0 whenTime  1000               -> observing
				  whenEvent local_consulting   -> updateKb
				  whenEvent local_consuming    -> updateKb
				  whenEvent local_preparation  -> updateKb
				  whenEvent local_leaving      -> updateKb
				  

	State updateKb{
		onMsg(local_consulting : local_consulting(CID, TIME)){
			[# 
				CurrentClientId = payloadArg(0).toString().toInt()
				CurrentTime = payloadArg(1).toString().toLong()
			 #]
			 solve( addRule(client($CurrentClientId, consulting, $CurrentTime)))
			 solve( showClientSituation(L1, L2))
		}
		onMsg(local_preparation : local_preparation(CID, TIME)){
			[# 
				CurrentClientId = payloadArg(0).toString().toInt()
				CurrentTime = payloadArg(1).toString().toLong()
			 #]
			 solve( client($CurrentClientId, consulting, T) )
			 ifSolved{[# Elapsed = CurrentTime - getCurSol("T").toString().toLong() #]}
			 solve( replaceRule(client($CurrentClientId, consulting, T), client($CurrentClientId, waiting_preparation, $CurrentTime)))
			 solve( addRule(elapsed($CurrentClientId, $Elapsed)) )
			 solve( showClientSituation(L1, L2))
		}
		onMsg(local_consuming : local_consuming(CID, TIME)){
			[# 
				CurrentClientId = payloadArg(0).toString().toInt()
				CurrentTime = payloadArg(1).toString().toLong()
			 #]
			 solve( elapsed($CurrentClientId, E) )
			 ifSolved{[# Elapsed = getCurSol("E").toString().toLong(); NewTime = CurrentTime - Elapsed #]}
			 solve( replaceRule(client($CurrentClientId, waiting_preparation, T), client($CurrentClientId, consuming, $NewTime)))
			 solve( removeRule(elapsed($CurrentClientId, T)) )
			 solve( showClientSituation(L1, L2))
		}
		onMsg(local_leaving : local_leaving(CID)){
			[# CurrentClientId = payloadArg(0).toString().toInt()#]
			solve( removeRule(client($CurrentClientId, S, T)) )
			solve( removeRule(elapsed($CurrentClientId, T)) )
			solve( showClientSituation(L1, L2))
		}
	} Goto observing							
}


/*FOR TESTING */

/*QActor tester context ctxwaiter	{
	State s0 initial{
		[# var CT = 0L #]
		
		delay 1000
		emit local_startMaxstaytimeObserver : local_startMaxstaytimeObserver(10000)
		memoCurrentTime CT
		emit local_consulting : local_consulting(1,$CT)
		delay 5000
		memoCurrentTime CT
		emit local_preparation : local_preparation(1,$CT)
		delay 8000
		memoCurrentTime CT
		emit local_consuming : local_consuming(1,$CT)
	}
	Transition t0 whenMsg maxStayTime -> alarm
	
	State alarm{
		onMsg( maxStayTime : maxStayTime(CID, STATE)){
			println("*****MAXSTAYTIME for client ${payloadArg(0)} while he's ${payloadArg(1)}!*****")			
		}
	}
}*/