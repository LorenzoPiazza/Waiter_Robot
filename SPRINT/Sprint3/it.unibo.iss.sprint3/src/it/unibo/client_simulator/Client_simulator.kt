/* Generated by AN DISI Unibo */ 
package it.unibo.client_simulator

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client_simulator ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CurrentClientId		 = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& CLIENT SIMULATOR | starts")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("listening") { //this:State
					action { //it:State
					}
					 transition(edgeName="t040",targetState="consultMenu",cond=whenDispatch("table_reached"))
					transition(edgeName="t041",targetState="consume",cond=whenDispatch("tea_served"))
				}	 
				state("consultMenu") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("table_reached(CID)"), Term.createTerm("table_reached(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId	 = payloadArg(0).toInt()
								println("&&&&& CLIENT | I consult the menù...")
								delay(5000) 
								forward("readyToOrder", "readyToOrder($CurrentClientId)" ,"waiterlogic" ) 
						}
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("consume") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tea_served(CID)"), Term.createTerm("tea_served(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId	 = payloadArg(0).toInt()
								println("&&&&& CLIENT | I drink the tea...")
								delay(5000) 
								forward("readyToPay", "readyToPay($CurrentClientId)" ,"waiterlogic" ) 
						}
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
			}
		}
}
