/* Generated by AN DISI Unibo */ 
package it.unibo.maxstaytimeobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maxstaytimeobserver ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var MaxStayTime		= 0L
				var CurrentClientId = 0
				var Elapsed 		= 0L
				var NewTime		    = 0L
				var NClientOver	    = 0
				var List  		    = ""
				var ListClientOver  = ""
				var ClientState		= ""			   
				var CurrentTime	    = 0L	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('clientsituationkb.pl')","") //set resVar	
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition(edgeName="t00",targetState="start",cond=whenEvent("local_startMaxstaytimeObserver"))
				}	 
				state("start") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("local_startMaxstaytimeObserver(MAXSTAYTIME)"), Term.createTerm("local_startMaxstaytimeObserver(MAXSTAYTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											   MaxStayTime = payloadArg(0).toString().toLong()
						}
					}
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
				state("observing") { //this:State
					action { //it:State
						solve("clientAndTimesToControl(LIST)","") //set resVar	
						if( currentSolution.isSuccess() ) { List = getCurSol("LIST").toString()  
						CurrentTime = getCurrentTime()
						solve("getClientOverTime($MaxStayTime,$CurrentTime,$List,RES)","") //set resVar	
						if( currentSolution.isSuccess() ) {  ListClientOver = getCurSol("RES").toString()  
						solve("length($ListClientOver,L)","") //set resVar	
							NClientOver = getCurSol("L").toString().toInt()
											for(I in 1..NClientOver){  
						solve("arg($I,$ListClientOver,CID)","") //set resVar	
								CurrentClientId  = getCurSol("CID").toString().toInt()  
						solve("client($CurrentClientId,STATE,_)","") //set resVar	
								ClientState = getCurSol("STATE").toString()  
						forward("maxStayTime", "maxStayTime($CurrentClientId,$ClientState)" ,"waiterlogic" ) 
						solve("removeRule(client($CurrentClientId,S,T))","") //set resVar	
						solve("removeRule(elapsed($CurrentClientId,T))","") //set resVar	
							}	 
						}
						else
						{}
						}
						else
						{}
						stateTimer = TimerActor("timer_observing", 
							scope, context!!, "local_tout_maxstaytimeobserver_observing", 1000.toLong() )
					}
					 transition(edgeName="t01",targetState="observing",cond=whenTimeout("local_tout_maxstaytimeobserver_observing"))   
					transition(edgeName="t02",targetState="updateKb",cond=whenEvent("local_consulting"))
					transition(edgeName="t03",targetState="updateKb",cond=whenEvent("local_consuming"))
					transition(edgeName="t04",targetState="updateKb",cond=whenEvent("local_preparation"))
					transition(edgeName="t05",targetState="updateKb",cond=whenEvent("local_leaving"))
				}	 
				state("updateKb") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("local_consulting(CID,TIME)"), Term.createTerm("local_consulting(CID,TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												CurrentClientId = payloadArg(0).toString().toInt()
												CurrentTime = payloadArg(1).toString().toLong()
								solve("addRule(client($CurrentClientId,consulting,$CurrentTime))","") //set resVar	
								solve("showClientSituation(L1,L2)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("local_preparation(CID,TIME)"), Term.createTerm("local_preparation(CID,TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												CurrentClientId = payloadArg(0).toString().toInt()
												CurrentTime = payloadArg(1).toString().toLong()
								solve("client($CurrentClientId,consulting,T)","") //set resVar	
								if( currentSolution.isSuccess() ) { Elapsed = CurrentTime - getCurSol("T").toString().toLong()  
								}
								else
								{}
								solve("replaceRule(client($CurrentClientId,consulting,T),client($CurrentClientId,waiting_preparation,$CurrentTime))","") //set resVar	
								solve("addRule(elapsed($CurrentClientId,$Elapsed))","") //set resVar	
								solve("showClientSituation(L1,L2)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("local_consuming(CID,TIME)"), Term.createTerm("local_consuming(CID,TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												CurrentClientId = payloadArg(0).toString().toInt()
												CurrentTime = payloadArg(1).toString().toLong()
								solve("elapsed($CurrentClientId,E)","") //set resVar	
								if( currentSolution.isSuccess() ) { Elapsed = getCurSol("E").toString().toLong(); NewTime = CurrentTime - Elapsed  
								}
								else
								{}
								solve("replaceRule(client($CurrentClientId,waiting_preparation,T),client($CurrentClientId,consuming,$NewTime))","") //set resVar	
								solve("removeRule(elapsed($CurrentClientId,T))","") //set resVar	
								solve("showClientSituation(L1,L2)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("local_leaving(CID)"), Term.createTerm("local_leaving(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 CurrentClientId = payloadArg(0).toString().toInt() 
								solve("removeRule(client($CurrentClientId,S,T))","") //set resVar	
								solve("removeRule(elapsed($CurrentClientId,T))","") //set resVar	
								solve("showClientSituation(L1,L2)","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="observing", cond=doswitch() )
				}	 
			}
		}
}
