/*
 * SPRINT_2: "GESTIONE DI UN SOLO CLIENTE"
 * Modello derivante dall'analisi del Problema fatta nello Sprint2.
 */

 System tearoom_covid19_sprint2
 mqttBroker "localhost" : 1883 eventTopic "unibo/polar" 
 
 /* Messaggi */

 /*--------waiterlogic <-> smartbell -------- */
 Request enterRequest : enterRequest(CID)
 Reply 	 answer 	  : answer(TIME)	// TIME = 0 significa che la richiesta del cliente viene accettata e il waiter sta arrivando ad accoglierlo altrimenti TIME rappresenta il maxWaitingTime da aspettare perchï¿½ la sala ï¿½ piena

 /*--------waiterlogic <-> barman ----------- */
 Dispatch order 	 : order(CID, TEA)
 Dispatch orderReady : orderReady(CID, TEA)
 
 /*--------waiterlogic <-> waiterwalker ----- */
 Request movetoCell : movetoCell(X,Y)
 Reply   atcell     : atcell(X,Y)
 Reply	 walkbreak  : walkbreak(X,Y) 
 
 /*-----------------timeout------------------ */
 Dispatch maxStayTime : maxStayTime(CID, CSTATE)
 
 /* ULTERIORI MESSAGGI UTILI AI FINI DELLA SIMULAZIONE */

 /*--------waiter <-> client ----------- */
 Dispatch table_reached : table_reached(CID)
 Dispatch readyToOrder  : readyToOrder(CID)
 Dispatch tea_served	: tea_served(CID) 
 Dispatch readyToPay    : readyToPay(CID)

 /*--------Auto-msg smartbell --------- */
 Dispatch ring 		  : ring(TEMPERATURE)

 /*For maxstayTime observer */
 Event local_consulting  			  : local_consulting (CID, CUR_TIME)
 Event local_consuming   			  : local_consuming  (CID, CUR_TIME)
 Event local_preparation 			  : local_preparation(CID, CUR_TIME)
 Event local_leaving				  : local_leaving	 (CID)
 Event local_startMaxstaytimeObserver : local_startMaxstaytimeObserver(MAXSTAYTIME)
 
 
 Context ctxwaiter			ip [ host="localhost"  port=8050 ]   // Non considero i ctxsmartbell e ctxbarman per semplicità
//Context ctxwaiterwalker	ip [ host= "127.0.0.1" port=8060 ]
// Context ctxsmartbell 	ip	[ host='localhost' port=8051 ]
// Context ctxservicedesk	ip	[ host='somehost3' port=8052 ]

 /* Attori */
 
 CodedQActor waiterwalker 		 context ctxwaiter		 className "it.unibo.waiterwalker.Waiterwalker"
 CodedQActor maxstaytimeobserver context ctxwaiter 		 className "it.unibo.maxstaytimeobserver.Maxstaytimeobserver"
 
 /* WAITER */
 QActor waiterlogic context ctxwaiter {
 	[#
 		var NTableAvailable 	 = 2
 		var NTableBusy			 = 0
 		var CurrentClientId		 = 0
		var CurrentSelectedTable = 0
		var CurX				 = 0
		var CurY				 = 0
		var ST	: String 		 = ""		//state of Tables
		var SW	: String   		 = ""		//state of Waiter
		
		var X_barman		= "0"
		var Y_barman		= "0"
	
		var X_entrancedoor  = "0"
		var Y_entrancedoor  = "0"
	
		var X_exitdoor      = "0"
		var Y_exitdoor      = "0"
	 
		var X_teatable1     = "0"
		var Y_teatable1     = "0"

		var X_teatable2     = "0"
		var Y_teatable2     = "0"
		
 	 	val MaxStayTime 	= 20000L
 	 	val TimeToRest  	= 20000L
 	 	val TimeToClean		= 5000L
 	 	val MaxWaitingTime 	= MaxStayTime + 5000L 	//Assuming PreparationTime = 5000L
 	 	var CurrentTime 	= 0L
 	 	
 	 	var CSituationAtTimeout = ""
 	 	var WaiterState 		= "rest(0,0)"
 	 	var TotalCleanRequired 	= false
 	 	var CurrentDirtyLevel   = 0
 	 	var NewDirtyLevel 		= 0
 	 #]

 	State s0 initial{
 		discardMsg Off
 		println("&&&&& waiter | starts")
 		run itunibo.planner.plannerUtil.initAI()
 		//SETTIAMO LE VARIABILI CONSULTANDO LA KB
 		solve( consult("tearoomkb.pl")	 )
 		solve( consult("sysRules.pl")	 )
		solve( pos( entrancedoor, X, Y ) ) 
		ifSolved { [# X_entrancedoor=getCurSol("X").toString() ;  Y_entrancedoor=getCurSol("Y").toString() #] }
		println("entrancedoor($X_entrancedoor, $Y_entrancedoor )")
 
		solve( pos( exitdoor, X, Y ) ) 
		ifSolved { [# X_exitdoor = getCurSol("X").toString();  Y_exitdoor = getCurSol("Y").toString() #] }
		println("exitdoor($X_exitdoor, $Y_exitdoor )")
 				
		solve( pos( barman, X, Y ) ) 
		ifSolved { [# X_barman = getCurSol("X").toString();  Y_barman = getCurSol("Y").toString() #] }
		println("barman($X_barman, $Y_barman)")

		solve( pos( teatable1, X, Y ) ) 
		ifSolved { [# X_teatable1 = getCurSol("X").toString();  Y_teatable1 = getCurSol("Y").toString() #] }
		println("teatable1($X_teatable1, $Y_teatable1)")

		solve( pos( teatable2, X, Y ) ) 
		ifSolved { [# X_teatable2 = getCurSol("X").toString();  Y_teatable2 = getCurSol("Y").toString() #] }
		println("teatable2($X_teatable2, $Y_teatable2)")
		
		emit local_startMaxstaytimeObserver : local_startMaxstaytimeObserver($MaxStayTime)
 	}
 	Goto waitForRequest

 	State waitForRequest{
 		//RESETTIAMO LE VARIABILI
 		[#	
 			CurrentClientId 	 = 0
 			CurrentSelectedTable = 0
			CurX             	 = itunibo.planner.plannerUtil.getPosX()
			CurY             	 = itunibo.planner.plannerUtil.getPosY()
			WaiterState 	 	 = "rest($CurX,$CurY)"
		#]
		println("---------------------------------------")
 		println("&&&&& waiter | waiting for any kind of requests...")
 		println("$WaiterState")
		solve( replaceRule( waiter(S), waiter($WaiterState)) )
 		solve( stateOfTeatables(ST) )
 		[# ST = getCurSol("ST").toString() #]
 		println("__ROOM STATE__ waiter: $SW $ST")
 		updateResource [# WaiterState #]
 	}
 	Transition t0 	whenTimeVar  TimeToClean  -> checkClean 
 					whenRequest  enterRequest -> evaluateEntrance
 					whenMsg		 readyToOrder -> reachTableToOrder	
 					whenMsg		 orderReady	  -> reachServiceDesk
 					whenMsg		 readyToPay   -> collectPayment
 					whenMsg 	 maxStayTime  -> collectPayment
	
	State checkClean{
		//Prima di andare a riposare controlla se ci sono dei tavoli dirty e in tal caso li pulisce.
		solve( teatable(N, dirty(LV)))
		ifSolved{
			[# CurrentSelectedTable = getCurSol("N"); CurrentDirtyLevel = getCurSol("LV") #]
			println("&&&&& waiter | The teatable $CurrentSelectedTable is dirty($CurrentDirtyLevel)!")
			[#	WaiterState = "cleaning(table($CurrentSelectedTable))"	#]
 			solve( replaceRule( waiter(S), waiter($WaiterState)) )
			updateResource [# WaiterState #]
		}	
	}
	Goto reachTableToClean if [# CurrentSelectedTable != 0 #] else waitForRequestNoCleanNeeded
	
	State waitForRequestNoCleanNeeded{
		println("&&&&& waiter | NO need of cleaning tables. Waiting for any kind of requests...")
	}
	Transition t0 	whenTimeVar  TimeToRest	  -> rest 					//Ora posso valutare di andare a riposare alla HOME
 					whenRequest  enterRequest -> evaluateEntrance
 					whenMsg		 readyToOrder -> reachTableToOrder	
 					whenMsg		 orderReady	  -> reachServiceDesk
 					whenMsg		 readyToPay   -> collectPayment
 					whenMsg 	 maxStayTime  -> collectPayment
	
 	State evaluateEntrance{
 		println("---------------------------------------")
 		onMsg( enterRequest : enterRequest(CID) ){
 			[#
				CurrentClientId = payloadArg(0).toString().toInt()
 				WaiterState 	= "serving_client($CurrentClientId)"
 			#]
 			println("&&&&& waiter | evaluating the enterRequest of the client ID = ${payloadArg(0)} ")
			solve( replaceRule( waiter(S), waiter($WaiterState)) )
			updateResource [# WaiterState #]
 			//Consult the KB to check the availability of at least a teatable in state tableclean
 			solve( numfreetables(N) )
 			ifSolved { [# NTableAvailable = getCurSol("N").toString().toInt() #] }
 			println("&&&&& waiter | There are $NTableAvailable table available.")
 		}
 		delay 2000
 	}
 	Goto accept if [# NTableAvailable >= 1 #] else maybeInform		//NTableAvailable >=1 significa che siamo nello scenario 1-2 o 3
 	
 	State maybeInform{
 		//TODO: check the number of busy tables.
 	}
 	Goto inform if[# NTableBusy == 2 #] /*Siamo nello scenario 4*/ else acceptButCleanFirst /*Siamo nello scenario 5 o 6*/
 	
 	State acceptButCleanFirst{
 		replyTo enterRequest with answer : cleanFirst(0)
 		//TODO: locate the most clean tables between the dirty(N) ones
 
 		println("&&&&& waiter | Enter Request accepted! Before reaching the client I have to totally clean the table $CurrentSelectedTable")
 		//and move to it
 		if [# CurrentSelectedTable == 1 #]{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 		} else{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 		}
 		[# TotalCleanRequired = true #]	
 	}
 	Transition t0 whenReply atcell 		-> clean
 				  whenReply walkbreak 	-> unexpected
 	
 	State inform{
 		println("---------------------------------------")
 		println("&&&&& waiter | Sorry, at the moment the TeaRoom is full. Retry in ${MaxStayTime/1000} seconds.")
 		replyTo enterRequest with answer : answer($MaxWaitingTime)
 	}
 	Goto waitForRequest

 	State accept{
 		println("---------------------------------------")
 		if [# !TotalCleanRequired #]{		//Se è false significa che non ho fatto la acceptButCleanFirst, quindi devo ancora rispondere al cliente e selezionare il tavolo
 			println("&&&&& waiter | Enter Request Accepted.")
 			replyTo enterRequest with answer : answer(0) 			
	 		//Select a table and occupy it with the Current CID: busy(CID)
	 		solve( teatable(N, tableclean) )
	 		ifSolved {[# CurrentSelectedTable = getCurSol("N").toString().toInt() #]}
 		}
 		[# TotalCleanRequired = false #]
 		println("&&&&& waiter | Occupy the table $CurrentSelectedTable for client $CurrentClientId.")
 		solve (replaceRule( teatable($CurrentSelectedTable, tableclean), teatable($CurrentSelectedTable, busy($CurrentClientId)) ))
 		solve( stateOfTeatables( ST ) )
 		ifSolved { [# ST = getCurSol("ST").toString() #]}
 		println("State of Tables: $ST ")
 	}
 	Goto reachEntranceDoor

 	State reachEntranceDoor{
 		println("---------------------------------------")
 		delay 3000
 		println("&&&&& waiter | I'm going to the entrance door...")
 		//MOVE TO THE ENTRANCE DOOR
 		request waiterwalker -m movetoCell : movetoCell($X_entrancedoor, $Y_entrancedoor)
 	}
 	Transition t0 whenReply atcell 	  -> convoyToTable
 				  whenReply walkbreak -> unexpected

 	State convoyToTable{
 		println("---------------------------------------")
 		delay 4000
 		println("&&&&& waiter | Follow me to the table $CurrentSelectedTable...")
 		//MOVE TO SELECTED TABLE
 		if [# CurrentSelectedTable == 1 #]{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 		} else{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 		}
 	}
 	Transition t0 whenReply atcell	  -> startCountdown 
 				  whenReply walkbreak -> unexpected
 	
 	State startCountdown{
 		println("---------------------------------------")
 		forward client_simulator -m table_reached : table_reached($CurrentClientId)
 		//Start the maxStayTime countdown for the CurrentClientId
		memoCurrentTime CurrentTime
		emit local_consulting : local_consulting($CurrentClientId, $CurrentTime)
 	}
 	Goto waitForRequest
 	
 	State reachTableToOrder{
 		println("---------------------------------------")
 		onMsg(readyToOrder : readyToOrder (CID)){
 			[#
				CurrentClientId = payloadArg(0).toString().toInt()
 				WaiterState 	= "serving_client($CurrentClientId)"
 			#]
 			solve( replaceRule( waiter(S), waiter($WaiterState)) )
 			updateResource [# WaiterState #]
 			//locate the table of the current CID
 			solve( teatable(N, busy($CurrentClientId)) )
 			ifSolved {[# CurrentSelectedTable = getCurSol("N").toString().toInt() #]}
			//and move to it
 			if [# CurrentSelectedTable == 1 #]{
 				request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 			} else{
 				request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 			}
 			println("&&&&& waiter | I'm reaching the table $CurrentSelectedTable to take the order of the client ${payloadArg(0)}.")
 		}
 	}
 	Transition t0 whenReply atcell 	  -> takeOrder 
 				  whenReply walkbreak -> unexpected

 	State takeOrder{
 		println("---------------------------------------")
 		println("&&&&& waiter | Taking the order of client $CurrentClientId and transmitting it to barman.")
		delay 2000
 		forward barman -m order : order( $payloadArg(0), LemonTea)
 		//Interrupt the maxStayTime countdown for the CurrentClientId
 		memoCurrentTime CurrentTime
		emit local_preparation : local_preparation($CurrentClientId, $CurrentTime)
		delay 4000
 	}
 	Goto waitForRequest
 	
	State reachServiceDesk{
		println("---------------------------------------")
		onMsg(orderReady : orderReady (CID, TEA)){
			[#	CurrentClientId = payloadArg(0).toString().toInt()
 				WaiterState 	= "serving_client($CurrentClientId)"
 			#]
 			solve( replaceRule( waiter(S), waiter($WaiterState)) )
			updateResource [# WaiterState #]
			println("&&&&& waiter | The order for Client $CurrentClientId is ready! I'm going to service desk")
 			delay 3000
	 		//MOVE TO SERVICE DESK
	 		request waiterwalker -m movetoCell : movetoCell($X_barman, $Y_barman)			
		}
	}
	Transition t0 whenReply atcell 	  -> reachTableToServe 
 				  whenReply walkbreak -> unexpected
 				  
 	State reachTableToServe{
 		println("---------------------------------------")
 		//locate the table of the current CID
 		solve( teatable(N, busy($CurrentClientId)) )
 		ifSolved {[# CurrentSelectedTable = getCurSol("N").toString().toInt() #]}
		//and move to it
 		if [# CurrentSelectedTable == 1 #]{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 		} else{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 		}
 		println("&&&&& waiter | I'm serving the order of the client $CurrentClientId to the table $CurrentSelectedTable.")
 	}
 	Transition t0 whenReply atcell 	  -> serveClient 
 				  whenReply walkbreak -> unexpected

	State serveClient{
		println("---------------------------------------")
		forward client_simulator -m tea_served : tea_served($CurrentClientId)
		//Resume the maxStayTime countdown for the CurrentClientId
 		memoCurrentTime CurrentTime
		emit local_consuming : local_consuming($CurrentClientId, $CurrentTime)	
	}
    Goto waitForRequest
 				  
 	State collectPayment{
 		println("---------------------------------------")
 		[#	
 			CurrentClientId = payloadArg(0).toString().toInt()
 		 	WaiterState 	= "serving_client($CurrentClientId)"
 		#]
 		updateResource [# WaiterState #]
 		solve( replaceRule( waiter(S), waiter($WaiterState)) )
 		onMsg(readyToPay : readyToPay(CID)){
 			println("&&&&& waiter | I'm going to the table of client $CurrentClientId and collect the payment.")
 			emit local_leaving : local_leaving($CurrentClientId)
 			delay 2000
 		}
 		onMsg(maxStayTime : maxStayTime(CID,STATE)){
 			[# CSituationAtTimeout = payloadArg(1).toString() #]
 			if[# CSituationAtTimeout == "consulting"#]{
 				println("&&&&& waiter | MAX STAY TIME FOR CLIENT $CurrentClientId is OVER while he's $CSituationAtTimeout the menù! No need to collect the payment.")
 			} else{
 				println("&&&&& waiter | MAX STAY TIME FOR CLIENT $CurrentClientId is OVER while he's $CSituationAtTimeout! I'm going to collect the payment.")
 			}
 			delay 2000
 		}
 		//locate the table of the current CID
 		solve( teatable(N, busy($CurrentClientId)) )
 		ifSolved {[# CurrentSelectedTable = getCurSol("N").toString().toInt() #]}
		//and move to it
 		if [# CurrentSelectedTable == 1 #]{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 		} else{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 		}	
 	}
 	Transition t0 whenReply atcell 	  -> convoyToExit 
 				  whenReply walkbreak -> unexpected

 	State convoyToExit{
 		println("---------------------------------------")
 		delay 2000
 		println("&&&&& waiter | Thank you! Follow me to the exit door...Bye,Bye!")
 		//Update the table state: dirty(1)
 		solve (replaceRule( teatable($CurrentSelectedTable, busy($CurrentClientId)), teatable($CurrentSelectedTable, dirty(1)) ))
 		solve( stateOfTeatables( ST ) )
 		ifSolved { [# ST = getCurSol("ST").toString() #]}
 		println("State of Tables: $ST ")
 		//MOVE TO EXIT DOOR
 		request waiterwalker -m movetoCell : movetoCell($X_exitdoor, $Y_exitdoor)
 		delay 3000
 	}
 	 Transition t0 whenReply atcell 	-> waitForRequest 
 	 			   whenReply walkbreak 	-> unexpected
	
	State reachTableToClean{
		println("---------------------------------------")
		println("&&&&& waiter | I'm going to clean table $CurrentSelectedTable")
		//MOVE TO TABLE
		if [# CurrentSelectedTable == 1 #]{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable1, $Y_teatable1)
 		} else{
 			request waiterwalker -m movetoCell : movetoCell($X_teatable2, $Y_teatable2)
 		}
	}
	Transition t0 whenReply atcell 	  -> clean 
 	 			  whenReply walkbreak -> unexpected
 	 			  
 	State clean{
 		println("---------------------------------------")
 		//Get the dirty level of the current table
 		solve( teatable($CurrentSelectedTable, dirty(LV)) )
 		ifSolved{[# CurrentDirtyLevel = getCurSol("LV").toString().toInt() #]}	
 		if[# TotalCleanRequired #]{	//Significa che arrivo dallo State acceptButCleanFirst
 			println("&&&&& waiter | Totally cleaning the table $CurrentSelectedTable...")
 			[# var TimeToClean = 4000*(4-CurrentDirtyLevel) #]
 			delayVar TimeToClean 
 			solve( replaceRule( teatable($CurrentSelectedTable, dirty($CurrentDirtyLevel)), teatable($CurrentSelectedTable, tableclean) )) 		
 		} else {
 			println("&&&&& waiter | Cleaning the table $CurrentSelectedTable that is dirty($CurrentDirtyLevel)...")
 			if[# CurrentDirtyLevel == 3 #]{
 				delay 4000
 				solve( replaceRule( teatable($CurrentSelectedTable, dirty($CurrentDirtyLevel)), teatable($CurrentSelectedTable, tableclean) ))
 			}else{
 				delay 4000
 				[# NewDirtyLevel = CurrentDirtyLevel+1 #]
 				solve( replaceRule( teatable($CurrentSelectedTable, dirty($CurrentDirtyLevel)), teatable($CurrentSelectedTable, $NewDirtyLevel) ))
 			}
 		}
 		solve( stateOfTeatables( ST ) )
 		ifSolved { [# ST = getCurSol("ST").toString() #]}
 		println("State of Tables: $ST ")
 	}
 	Goto accept if [# TotalCleanRequired #] else waitForRequest
	
 	State rest{
 		println("---------------------------------------")
 		println("&&&&& waiter | I'm going to return to home and relax.")
 		//MOVE TO HOME
 		request waiterwalker -m movetoCell : movetoCell(0, 0)
 	}
 	Transition t0 	whenReply atcell 	  -> waitForRequestWhileResting 
	     			whenReply walkbreak   -> unexpected
	     			
	 State waitForRequestWhileResting{
	 	[#	
			CurX             	 = itunibo.planner.plannerUtil.getPosX()
			CurY             	 = itunibo.planner.plannerUtil.getPosY()
			WaiterState 	 	 = "rest($CurX,$CurY)"
		#]
		println("---------------------------------------")
 		println("&&&&& waiter | RESTING at home. Waiting for any kind of requests...")
		solve( replaceRule( waiter(S), waiter($WaiterState)) )
 		solve( stateOfTeatables(ST) )
 		[# ST = getCurSol("ST").toString() #]
 		println("__ROOM STATE__ waiter: $SW $ST")
 		updateResource [# WaiterState #]
	 }
	 Transition t0	whenRequest  enterRequest -> evaluateEntrance
 					whenMsg		 readyToOrder -> reachTableToOrder	
 					whenMsg		 orderReady	  -> reachServiceDesk
 					whenMsg		 readyToPay   -> collectPayment
 					whenMsg 	 maxStayTime  -> collectPayment
 	 
 	 State unexpected{
 	 	println("---------------------------------------")
 		println("Sorry, there is something wrong ...")
		printCurrentMessage
	}
 }



 /* SMARTBELL */
 QActor smartbell context ctxwaiter{
 	[#
 		var CurrentBodyTemperature = 36.0
 		var CurrentClientId = 0
 	#]
 	 State s0 initial{
 		println("&&&&& smartbell | starts")
 		println("PRESS ENTER TO SIMULATE THE ARRIVE OF A CLIENT")
		[# readLine() #]
 		//TODO: generate a TemperatureValue
 		forward smartbell -m ring : ring($CurrentBodyTemperature)
		//forward smartbell -m ring : ring(38)
 	}
 	Goto listening

 	State listening{
 		println("&&&&& smartbell | listening to ringing...")
 		delay 2000
 	}
 	Transition t0 	whenMsg ring -> checkClient

 	State checkClient{
 		onMsg(ring : ring(TEMPERATURE) ){
 			println("&&&&& smartbell | DRIIN !! Let's control the body temperature...")
 			delay 5000
 			[# CurrentBodyTemperature = payloadArg(0).toString().toDouble() #]
 		}
 	}
 	Goto doEnterReq if [# CurrentBodyTemperature < 37.5 #] else refuseClient

 	State doEnterReq{
 		[# CurrentClientId ++ #]
 		println("&&&&& smartbell | Forward the entranceRequest for client $CurrentClientId.")
 		request waiterlogic -m enterRequest : enterRequest($CurrentClientId)
 		delay 5000
 	}
	Transition t0 whenReply answer -> checkAnswer
	
	State checkAnswer{
		onMsg(answer : answer(TIME)){
			if [# payloadArg(0).toString().toInt() == 0 #]{
				println("WELCOME! You're the Client $CurrentClientId. The waiter is coming to you. ")
			}else{
				println("The Room is full. Retry in ${payloadArg(0)} millisec")
			}
		}
		onMsg(answer : cleanFirst(TIME)){
			println("WELCOME! You're the Client $CurrentClientId. The waiter has to clean first a table and then will come to you. ")
		}
	} Goto listening

 	State refuseClient{
 		println("&&&&& smartbell | I'm sorry! You're not allowed to enter cause your body temperature is too high.")
 	}
 	Goto listening
 }



 /* BARMAN */
 QActor barman context ctxwaiter {
	[# val PreparationTime = 5000L #]
	
	 State s0 initial{
 		println("&&&&& barman | starts")
 	}
 	Goto waitForOrder

 	State waitForOrder{
 		println("&&&&& barman | waiting for orders...")
 	}
 	Transition t0 whenMsg order -> prepare

 	State prepare{
 		onMsg(order : order(CID, TEA)){
 			[#
 				var CurrentClientId 	= payloadArg(0).toInt()
 				var CurrentTeaOrdered 	= payloadArg(1)
 			#]
 			println("&&&&& barman | preparing the order of ${payloadArg(1)} for client ${payloadArg(0)}.")
 			delayVar PreparationTime 	//WARNING: Blocking: not suitable to simulate multiple order preparations
 			forward waiterlogic -m orderReady : orderReady($CurrentClientId, $CurrentTeaOrdered)
 		}
 	}
 	Goto waitForOrder
 }

  /* CLIENT SIMULATOR */
 
/*
  * Un client_simulator molto semplice:
  * Questo attore non fa altro che stare in ascolto di messaggi provenienti dal waiterlogic dove viene detto:
  * -table_reached(CID): quando lo riceve, dopo tot manda un messaggio readyToOrder(CID).
  * -tea_served(CID): quando lo riceve, dopo tot manda un messaggio readyToPay(CID).
  * 
  * ATTENZIONE1: Non viene controllato che il cliente non sia già stato cacciato per aver superato maxstaytime, e readyToPay viene mandato in ogni caso. 
  * ATTENZIONE2: Non è adatto a simulare più clienti contemporaneamente.
*/


 QActor client_simulator context ctxwaiter{
 	[#
		var CurrentClientId		 = 0
 	#]
 	State s0 initial{
 		println("&&&&& CLIENT SIMULATOR | starts")
 		delay 1000
 	}
 	Goto listening

 	State listening{
 		
 	}
 	Transition t0 whenMsg table_reached	   	   ->  	consultMenu
 				  whenMsg tea_served       ->	consume

 	State consultMenu{
 		onMsg(table_reached : table_reached(CID)){
 			[#
				CurrentClientId	 = payloadArg(0).toInt()
 			#]
 			println("&&&&& CLIENT | I consult the menù...")
 			delay 5000 		//WARNING: Blocking: not suitable to simulate multiple client
 			forward waiterlogic -m readyToOrder : readyToOrder($CurrentClientId)
 		}
 	}
 	Goto listening

 	State consume{
 		onMsg(tea_served : tea_served(CID)){
 			[#
				CurrentClientId	 = payloadArg(0).toInt()
 			#]
 			println("&&&&& CLIENT | I drink the tea...")
 			delay 5000		//WARNING: Blocking: not suitable to simulate multiple client
 			forward waiterlogic -m readyToPay : readyToPay($CurrentClientId) //WARNING: Se il cliente è già stato 'cacciato' questo messaggio non va inviato
 		}
 	}
 	Goto listening
 }