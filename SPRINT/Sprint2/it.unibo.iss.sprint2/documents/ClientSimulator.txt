 /* CLIENT SIMULATOR */
 
/*
  * Un client_simulator molto semplice:
  * Questo attore non fa altro che stare in ascolto di messaggi provenienti dal waiterlogic dove viene detto:
  * -table_reached(CID): quando lo riceve, dopo tot manda un messaggio readyToOrder(CID).
  * -tea_served(CID): quando lo riceve, dopo tot manda un messaggio readyToPay(CID).
  * 
  * ATTENZIONE1: Non viene controllato che il cliente non sia già stato cacciato per aver superato maxstaytime, e readyToPay viene mandato in ogni caso. 
  * ATTENZIONE2: Non è adatto a simulare più clienti contemporaneamente.
*/


 QActor client_simulator context ctxtearoom{
 	[#
		lateinit var CurrentClientId	
 	#]
 	State s0 initial{
 		println("&&&&& CLIENT SIMULATOR | starts")
 		delay 1000
 	}
 	Goto listening

 	State listening{
 		
 	}
 	Transition t0 whenMsg table_reached	   	   ->  	consultMenu
 				  whenMsg tea_served       ->	consume

 	State consultMenu{
 		onMsg(table_reached : table_reached(CID)){
 			[#
				CurrentClientId	 = payloadArg(0).toInt()
 			#]
 			println("&&&&& CLIENT | I consult the menù...")
 			delay 5000 		//WARNING: Blocking: not suitable to simulate multiple client
 			forward waiterlogic -m readyToOrder : readyToOrder($CurrentClientId)
 		}
 	}
 	Goto listening

 	State consume{
 		onMsg(tea_served : tea_served(CID)){
 			[#
				CurrentClientId	 = payloadArg(0).toInt()
 			#]
 			println("&&&&& CLIENT | I drink the tea...")
 			delay 5000		//WARNING: Blocking: not suitable to simulate multiple client
 			forward waiterlogic -m readyToPay : readyToPay($CurrentClientId) //WARNING: Se il cliente è già stato 'cacciato' questo messaggio non va inviato
 		}
 	}
 	Goto listening
 }