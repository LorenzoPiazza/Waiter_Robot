/* Generated by AN DISI Unibo */ 
package it.unibo.client_simulator1

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client_simulator1 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var CurrentClientId		 = 0
				var CurrentTime 		 = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&&& CLIENT SIMULATOR 1 | starts")
						discardMessages = true
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
				state("listening") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("maxStayTime(CID,CSTATE)"), Term.createTerm("maxStayTime(CID,CSTATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId	 = payloadArg(0).toInt()
								updateResourceRep("CLIENT at table 1 | MAX STAY TIME OVER!" 
								)
								delay(14000) 
						}
						updateResourceRep("CLIENT at table 1 | NO client" 
						)
					}
					 transition(edgeName="t040",targetState="consultMenu",cond=whenDispatch("table_reached"))
				}	 
				state("consultMenu") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("table_reached(CID)"), Term.createTerm("table_reached(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId	 = payloadArg(0).toInt()
								println("&&&&& CLIENT $CurrentClientId at table 1 | I consult the menu...")
								updateResourceRep("CLIENT at table 1 | I consult the menu..." 
								)
						}
					}
					 transition(edgeName="t041",targetState="order",cond=whenDispatch("proceed"))
					transition(edgeName="t042",targetState="listening",cond=whenDispatch("maxStayTime"))
				}	 
				state("order") { //this:State
					action { //it:State
						forward("readyToOrder", "readyToOrder($CurrentClientId)" ,"waiterlogic" ) 
						CurrentTime = getCurrentTime()
						emit("local_preparation", "local_preparation($CurrentClientId,$CurrentTime)" ) 
						updateResourceRep("CLIENT at table 1 | Ordering phase..." 
						)
					}
					 transition(edgeName="t043",targetState="consume",cond=whenDispatch("tea_served"))
				}	 
				state("consume") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tea_served(CID)"), Term.createTerm("tea_served(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId	 = payloadArg(0).toInt()
								println("&&&&& CLIENT $CurrentClientId | I drink the tea...")
								updateResourceRep("CLIENT at table 1 | I drink the tea..." 
								)
						}
					}
					 transition(edgeName="t044",targetState="pay",cond=whenDispatch("proceed"))
					transition(edgeName="t045",targetState="listening",cond=whenDispatch("maxStayTime"))
				}	 
				state("pay") { //this:State
					action { //it:State
						forward("readyToPay", "readyToPay($CurrentClientId)" ,"waiterlogic" ) 
						emit("local_leaving", "local_leaving($CurrentClientId)" ) 
						updateResourceRep("CLIENT at table 1 | Payment phase..." 
						)
						delay(12000) 
					}
					 transition( edgeName="goto",targetState="listening", cond=doswitch() )
				}	 
			}
		}
}
