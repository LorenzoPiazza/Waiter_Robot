/* Generated by AN DISI Unibo */ 
package it.unibo.waiterlogic

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiterlogic ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		 		var NTableAvailable 	 = 2
		 		var NTableBusy			 = 0
		 		var CurrentClientId		 = 0
				var CurrentSelectedTable = 0
				var CurX				 = 0
				var CurY				 = 0
				var ST	: String 		 = ""		//state of Tables
				var SW	: String   		 = ""		//state of Waiter
				
				var X_barman		= "0"
				var Y_barman		= "0"
			
				var X_entrancedoor  = "0"
				var Y_entrancedoor  = "0"
			
				var X_exitdoor      = "0"
				var Y_exitdoor      = "0"
			 
				var X_teatable1     = "0"
				var Y_teatable1     = "0"
		
				var X_teatable2     = "0"
				var Y_teatable2     = "0"
				
		 	 	val MaxStayTime 	= 50000L
		 	 	val TimeToRest  	= 20000L
		 	 	val TimeToClean		= 2000L
		 	 	val MaxWaitingTime 	= MaxStayTime + 5000L 	//Assuming PreparationTime = 5000L
		 	 	var CurrentTime 	= 0L
		 	 	
		 	 	var CSituationAtTimeout = ""
		 	 	var WaiterState 		= "rest(0,0)"
		 	 	var TotalCleanRequired 	= false
		 	 	var CurrentDirtyLevel   = 0
		 	 	var NewDirtyLevel 		= 0
		 	 	var maxst				= false
		 	 	var RoomState			= ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						println("&&&&& waiter | starts")
						itunibo.planner.plannerUtil.initAI(  )
						solve("consult('tearoomkb.pl')","") //set resVar	
						solve("consult('sysRules.pl')","") //set resVar	
						solve("pos(entrancedoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_entrancedoor=getCurSol("X").toString() ;  Y_entrancedoor=getCurSol("Y").toString()  
						}
						else
						{}
						println("entrancedoor($X_entrancedoor, $Y_entrancedoor )")
						solve("pos(exitdoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_exitdoor = getCurSol("X").toString();  Y_exitdoor = getCurSol("Y").toString()  
						}
						else
						{}
						println("exitdoor($X_exitdoor, $Y_exitdoor )")
						solve("pos(barman,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_barman = getCurSol("X").toString();  Y_barman = getCurSol("Y").toString()  
						}
						else
						{}
						println("barman($X_barman, $Y_barman)")
						solve("pos(teatable1,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_teatable1 = getCurSol("X").toString();  Y_teatable1 = getCurSol("Y").toString()  
						}
						else
						{}
						println("teatable1($X_teatable1, $Y_teatable1)")
						solve("pos(teatable2,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_teatable2 = getCurSol("X").toString();  Y_teatable2 = getCurSol("Y").toString()  
						}
						else
						{}
						println("teatable2($X_teatable2, $Y_teatable2)")
						emit("local_startMaxstaytimeObserver", "local_startMaxstaytimeObserver($MaxStayTime)" ) 
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("waitForRequest") { //this:State
					action { //it:State
							
						 			CurrentClientId 	 = 0
						 			CurrentSelectedTable = 0
									CurX             	 = itunibo.planner.plannerUtil.getPosX()
									CurY             	 = itunibo.planner.plannerUtil.getPosY()
									WaiterState 	 	 = "rest($CurX,$CurY)"
						println("---------------------------------------")
						println("&&&&& waiter | waiting for any kind of requests...")
						println("$WaiterState")
						solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
						solve("stateOfTeatables(ST)","") //set resVar	
						 ST = getCurSol("ST").toString()  
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
						println("__ROOM STATE__ waiter: $WaiterState $ST")
						stateTimer = TimerActor("timer_waitForRequest", 
							scope, context!!, "local_tout_waiterlogic_waitForRequest", TimeToClean )
					}
					 transition(edgeName="t00",targetState="checkClean",cond=whenTimeout("local_tout_waiterlogic_waitForRequest"))   
					transition(edgeName="t01",targetState="evaluateEntrance",cond=whenRequest("enterRequest"))
					transition(edgeName="t02",targetState="reachTableToOrder",cond=whenDispatch("readyToOrder"))
					transition(edgeName="t03",targetState="reachServiceDesk",cond=whenDispatch("orderReady"))
					transition(edgeName="t04",targetState="reachTableToCollect",cond=whenDispatch("readyToPay"))
					transition(edgeName="t05",targetState="reachTableToCollect",cond=whenDispatch("maxStayTime"))
				}	 
				state("checkClean") { //this:State
					action { //it:State
						solve("teatable(N,dirty(LV))","") //set resVar	
						if( currentSolution.isSuccess() ) { CurrentSelectedTable = getCurSol("N").toString().toInt(); CurrentDirtyLevel = getCurSol("LV").toString().toInt()  
						println("&&&&& waiter | The teatable $CurrentSelectedTable is dirty($CurrentDirtyLevel)!")
							WaiterState = "cleaning(table($CurrentSelectedTable))"	 
						solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
						}
						else
						{}
					}
					 transition( edgeName="goto",targetState="reachTableToClean", cond=doswitchGuarded({ CurrentSelectedTable != 0  
					}) )
					transition( edgeName="goto",targetState="waitForRequestNoCleanNeeded", cond=doswitchGuarded({! ( CurrentSelectedTable != 0  
					) }) )
				}	 
				state("waitForRequestNoCleanNeeded") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | NO need of cleaning tables. Waiting for any kind of requests...")
						stateTimer = TimerActor("timer_waitForRequestNoCleanNeeded", 
							scope, context!!, "local_tout_waiterlogic_waitForRequestNoCleanNeeded", TimeToRest )
					}
					 transition(edgeName="t06",targetState="rest",cond=whenTimeout("local_tout_waiterlogic_waitForRequestNoCleanNeeded"))   
					transition(edgeName="t07",targetState="evaluateEntrance",cond=whenRequest("enterRequest"))
					transition(edgeName="t08",targetState="reachTableToOrder",cond=whenDispatch("readyToOrder"))
					transition(edgeName="t09",targetState="reachServiceDesk",cond=whenDispatch("orderReady"))
					transition(edgeName="t010",targetState="reachTableToCollect",cond=whenDispatch("readyToPay"))
					transition(edgeName="t011",targetState="reachTableToCollect",cond=whenDispatch("maxStayTime"))
				}	 
				state("evaluateEntrance") { //this:State
					action { //it:State
						println("---------------------------------------")
						if( checkMsgContent( Term.createTerm("enterRequest(CID)"), Term.createTerm("enterRequest(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId = payloadArg(0).toString().toInt()
								 				WaiterState 	= "serving_client($CurrentClientId)"
								println("&&&&& waiter | evaluating the enterRequest of the client ID = ${payloadArg(0)} ")
								solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
								 RoomState = "waiter($WaiterState) \n $ST" 
								updateResourceRep( RoomState  
								)
								solve("numfreetables(N)","") //set resVar	
								if( currentSolution.isSuccess() ) { NTableAvailable = getCurSol("N").toString().toInt()  
								}
								else
								{}
								println("&&&&& waiter | There are $NTableAvailable table available.")
						}
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitchGuarded({ NTableAvailable >= 1  
					}) )
					transition( edgeName="goto",targetState="maybeInform", cond=doswitchGuarded({! ( NTableAvailable >= 1  
					) }) )
				}	 
				state("maybeInform") { //this:State
					action { //it:State
						solve("numbusytables(N)","") //set resVar	
						if( currentSolution.isSuccess() ) { NTableBusy = getCurSol("N").toString().toInt()  
						}
						else
						{}
						println("&&&&& waiter | There are $NTableBusy table busy.")
					}
					 transition( edgeName="goto",targetState="inform", cond=doswitchGuarded({ NTableBusy == 2  
					}) )
					transition( edgeName="goto",targetState="acceptButCleanFirst", cond=doswitchGuarded({! ( NTableBusy == 2  
					) }) )
				}	 
				state("acceptButCleanFirst") { //this:State
					action { //it:State
						 var LV1 = 0; var LV2 = 0  
						answer("enterRequest", "answer", "cleanFirst(0)"   )  
						solve("teatable(1,dirty(LV1))","") //set resVar	
						if( currentSolution.isSuccess() ) { LV1 = getCurSol("LV1").toString().toInt()  
						}
						else
						{}
						solve("teatable(2,dirty(LV2))","") //set resVar	
						if( currentSolution.isSuccess() ) { LV2 = getCurSol("LV2").toString().toInt()  
						}
						else
						{}
						if(  LV1>=LV2  
						 ){ CurrentSelectedTable = 1  
						request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
						}
						else
						 { CurrentSelectedTable = 2  
						 request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
						 }
						println("&&&&& waiter | Enter Request accepted! But before reaching the client I have to totally clean the table $CurrentSelectedTable")
						 TotalCleanRequired = true  
					}
					 transition(edgeName="t012",targetState="clean",cond=whenReply("atcell"))
					transition(edgeName="t013",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("inform") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | Sorry, at the moment the TeaRoom is full. Retry in ${MaxWaitingTime/1000} seconds.")
						answer("enterRequest", "answer", "answer($MaxWaitingTime)"   )  
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | Enter Request Accepted.")
						answer("enterRequest", "answer", "answer(0)"   )  
						solve("teatable(N,tableclean)","") //set resVar	
						if( currentSolution.isSuccess() ) { CurrentSelectedTable = getCurSol("N").toString().toInt()  
						}
						else
						{}
						println("&&&&& waiter | Occupy the table $CurrentSelectedTable for client $CurrentClientId.")
						solve("replaceRule(teatable($CurrentSelectedTable,tableclean),teatable($CurrentSelectedTable,busy($CurrentClientId)))","") //set resVar	
						solve("stateOfTeatables(ST)","") //set resVar	
						if( currentSolution.isSuccess() ) { ST = getCurSol("ST").toString()  
						}
						else
						{}
						println("State of Tables: $ST ")
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
					}
					 transition( edgeName="goto",targetState="reachEntranceDoor", cond=doswitch() )
				}	 
				state("reachEntranceDoor") { //this:State
					action { //it:State
						 TotalCleanRequired = false  
						println("---------------------------------------")
						println("&&&&& waiter | I'm going to the entrance door...")
						delay(2000) 
						request("movetoCell", "movetoCell($X_entrancedoor,$Y_entrancedoor)" ,"waiterwalker" )  
					}
					 transition(edgeName="t014",targetState="convoyToTable",cond=whenReply("atcell"))
					transition(edgeName="t015",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("convoyToTable") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | Follow me to the table $CurrentSelectedTable...")
						delay(500) 
						println("PRESS ENTER TO CONTINUE AND REACH THE TABLE")
						if(  CurrentSelectedTable == 1  
						 ){request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
						}
						else
						 {request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
						 }
					}
					 transition(edgeName="t016",targetState="startCountdown",cond=whenReply("atcell"))
					transition(edgeName="t017",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("startCountdown") { //this:State
					action { //it:State
						println("---------------------------------------")
						if(  CurrentSelectedTable == 1  
						 ){forward("table_reached", "table_reached($CurrentClientId)" ,"client_simulator1" ) 
						}
						else
						 {forward("table_reached", "table_reached($CurrentClientId)" ,"client_simulator2" ) 
						 }
						CurrentTime = getCurrentTime()
						emit("local_consulting", "local_consulting($CurrentClientId,$CurrentTime)" ) 
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("reachTableToOrder") { //this:State
					action { //it:State
						println("---------------------------------------")
						if( checkMsgContent( Term.createTerm("readyToOrder(CID)"), Term.createTerm("readyToOrder(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												CurrentClientId = payloadArg(0).toString().toInt()
								 				WaiterState 	= "serving_client($CurrentClientId)"
								solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
								 RoomState = "waiter($WaiterState) \n $ST" 
								updateResourceRep( RoomState  
								)
								solve("teatable(N,busy($CurrentClientId))","") //set resVar	
								if( currentSolution.isSuccess() ) { CurrentSelectedTable = getCurSol("N").toString().toInt()  
								}
								else
								{}
								if(  CurrentSelectedTable == 1  
								 ){request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
								}
								else
								 {request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
								 }
								println("&&&&& waiter | I'm reaching the table $CurrentSelectedTable to take the order of the client ${payloadArg(0)}.")
						}
					}
					 transition(edgeName="t018",targetState="takeOrder",cond=whenReply("atcell"))
					transition(edgeName="t019",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("takeOrder") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | Taking the order of client $CurrentClientId and transmitting it to barman.")
						delay(2000) 
						println("PRESS ENTER TO CONTINUE AND TRASMIT THE ORDER TO THE BARMAN")
						forward("order", "order(${payloadArg(0)},LemonTea)" ,"barman" ) 
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("reachServiceDesk") { //this:State
					action { //it:State
						println("---------------------------------------")
						if( checkMsgContent( Term.createTerm("orderReady(CID,TEA)"), Term.createTerm("orderReady(CID,TEA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									CurrentClientId = payloadArg(0).toString().toInt()
								 				WaiterState 	= "serving_client($CurrentClientId)"
								solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
								 RoomState = "waiter($WaiterState) \n $ST" 
								updateResourceRep( RoomState  
								)
								println("&&&&& waiter | The order for Client $CurrentClientId is ready! I'm going to service desk")
								println("PRESS ENTER TO CONTINUE AND REACH SERVICE DESK")
								request("movetoCell", "movetoCell($X_barman,$Y_barman)" ,"waiterwalker" )  
						}
					}
					 transition(edgeName="t020",targetState="reachTableToServe",cond=whenReply("atcell"))
					transition(edgeName="t021",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("reachTableToServe") { //this:State
					action { //it:State
						println("---------------------------------------")
						solve("teatable(N,busy($CurrentClientId))","") //set resVar	
						if( currentSolution.isSuccess() ) { CurrentSelectedTable = getCurSol("N").toString().toInt()  
						}
						else
						{}
						if(  CurrentSelectedTable == 1  
						 ){request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
						}
						else
						 {request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
						 }
						println("&&&&& waiter | I'm serving the order of the client $CurrentClientId to the table $CurrentSelectedTable.")
					}
					 transition(edgeName="t022",targetState="serveClient",cond=whenReply("atcell"))
					transition(edgeName="t023",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("serveClient") { //this:State
					action { //it:State
						println("---------------------------------------")
						if(  CurrentSelectedTable == 1  
						 ){forward("tea_served", "tea_served($CurrentClientId)" ,"client_simulator1" ) 
						}
						else
						 {forward("tea_served", "tea_served($CurrentClientId)" ,"client_simulator2" ) 
						 }
						CurrentTime = getCurrentTime()
						emit("local_consuming", "local_consuming($CurrentClientId,$CurrentTime)" ) 
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("reachTableToCollect") { //this:State
					action { //it:State
						println("---------------------------------------")
						if( checkMsgContent( Term.createTerm("readyToPay(CID)"), Term.createTerm("readyToPay(CID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
								 				CurrentClientId = payloadArg(0).toString().toInt()
								 		 		WaiterState 	= "serving_client($CurrentClientId)"
								println("&&&&& waiter | I'm going to the table of client $CurrentClientId and collect the payment.")
								delay(2000) 
						}
						if( checkMsgContent( Term.createTerm("maxStayTime(CID,CSTATE)"), Term.createTerm("maxStayTime(CID,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  maxst = true
								 				CSituationAtTimeout = payloadArg(1).toString()
								 				CurrentClientId = payloadArg(0).toString().toInt()
								 		 		WaiterState 	= "serving_client($CurrentClientId)"
								if(  CSituationAtTimeout == "consulting" 
								 ){println("&&&&& waiter | MAX STAY TIME FOR CLIENT $CurrentClientId is OVER while he's $CSituationAtTimeout the menu! No need to collect the payment.")
								}
								else
								 {println("&&&&& waiter | MAX STAY TIME FOR CLIENT $CurrentClientId is OVER while he's $CSituationAtTimeout! I'm going to collect the payment.")
								 }
						}
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
						solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
						solve("teatable(N,busy($CurrentClientId))","") //set resVar	
						if( currentSolution.isSuccess() ) { CurrentSelectedTable = getCurSol("N").toString().toInt()  
						}
						else
						{}
						if(  CurrentSelectedTable == 1  
						 ){if(  maxst  
						 ){forward("maxStayTime", "maxStayTime($CurrentClientId,$CSituationAtTimeout)" ,"client_simulator1" ) 
						 maxst = false  
						}
						request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
						}
						else
						 {if(  maxst  
						  ){forward("maxStayTime", "maxStayTime($CurrentClientId,$CSituationAtTimeout)" ,"client_simulator2" ) 
						  maxst = false  
						 }
						 request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
						 }
					}
					 transition(edgeName="t024",targetState="collectAndConvoyToExit",cond=whenReply("atcell"))
					transition(edgeName="t025",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("collectAndConvoyToExit") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | Thank you! Follow me to the exit door...Bye,Bye!")
						solve("replaceRule(teatable($CurrentSelectedTable,busy($CurrentClientId)),teatable($CurrentSelectedTable,dirty(1)))","") //set resVar	
						solve("stateOfTeatables(ST)","") //set resVar	
						if( currentSolution.isSuccess() ) { ST = getCurSol("ST").toString()  
						}
						else
						{}
						println("State of Tables: $ST ")
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
						request("movetoCell", "movetoCell($X_exitdoor,$Y_exitdoor)" ,"waiterwalker" )  
						delay(3000) 
					}
					 transition(edgeName="t026",targetState="waitForRequest",cond=whenReply("atcell"))
					transition(edgeName="t027",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("reachTableToClean") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | I'm going to clean table $CurrentSelectedTable")
						if(  CurrentSelectedTable == 1  
						 ){request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"waiterwalker" )  
						}
						else
						 {request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"waiterwalker" )  
						 }
					}
					 transition(edgeName="t028",targetState="clean",cond=whenReply("atcell"))
					transition(edgeName="t029",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("clean") { //this:State
					action { //it:State
						println("---------------------------------------")
						solve("teatable($CurrentSelectedTable,dirty(LV))","") //set resVar	
						if( currentSolution.isSuccess() ) { CurrentDirtyLevel = getCurSol("LV").toString().toInt()  
						}
						else
						{}
						if(  TotalCleanRequired  
						 ){println("&&&&& waiter | Totally cleaning the table $CurrentSelectedTable...")
						 var TimeToClean = 4000L*(4-CurrentDirtyLevel)  
						delay(TimeToClean)
						println("&&&&& waiter | Occupy the table $CurrentSelectedTable for client $CurrentClientId.")
						solve("replaceRule(teatable($CurrentSelectedTable,dirty($CurrentDirtyLevel)),teatable($CurrentSelectedTable,busy($CurrentClientId)))","") //set resVar	
						}
						else
						 {println("&&&&& waiter | Cleaning the table $CurrentSelectedTable that is dirty($CurrentDirtyLevel)...")
						 if(  CurrentDirtyLevel == 3  
						  ){delay(4000) 
						 solve("replaceRule(teatable($CurrentSelectedTable,dirty($CurrentDirtyLevel)),teatable($CurrentSelectedTable,tableclean))","") //set resVar	
						 }
						 else
						  {delay(4000) 
						   NewDirtyLevel = CurrentDirtyLevel+1  
						  solve("replaceRule(teatable($CurrentSelectedTable,dirty($CurrentDirtyLevel)),teatable($CurrentSelectedTable,dirty($NewDirtyLevel)))","") //set resVar	
						  }
						 }
						solve("stateOfTeatables(ST)","") //set resVar	
						if( currentSolution.isSuccess() ) { ST = getCurSol("ST").toString()  
						}
						else
						{}
						println("State of Tables: $ST ")
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
					}
					 transition( edgeName="goto",targetState="reachEntranceDoor", cond=doswitchGuarded({ TotalCleanRequired  
					}) )
					transition( edgeName="goto",targetState="waitForRequest", cond=doswitchGuarded({! ( TotalCleanRequired  
					) }) )
				}	 
				state("rest") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("&&&&& waiter | I'm going to return to home and relax.")
						request("movetoCell", "movetoCell(0,0)" ,"waiterwalker" )  
					}
					 transition(edgeName="t030",targetState="waitForRequestWhileResting",cond=whenReply("atcell"))
					transition(edgeName="t031",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("waitForRequestWhileResting") { //this:State
					action { //it:State
							
									CurX             	 = itunibo.planner.plannerUtil.getPosX()
									CurY             	 = itunibo.planner.plannerUtil.getPosY()
									WaiterState 	 	 = "rest($CurX,$CurY)"
						println("---------------------------------------")
						println("&&&&& waiter | RESTING at home. Waiting for any kind of requests...")
						solve("replaceRule(waiter(S),waiter($WaiterState))","") //set resVar	
						solve("stateOfTeatables(ST)","") //set resVar	
						 ST = getCurSol("ST").toString()  
						println("__ROOM STATE__ waiter: $WaiterState $ST")
						 RoomState = "waiter($WaiterState) \n $ST" 
						updateResourceRep( RoomState  
						)
					}
					 transition(edgeName="t032",targetState="evaluateEntrance",cond=whenRequest("enterRequest"))
					transition(edgeName="t033",targetState="reachTableToOrder",cond=whenDispatch("readyToOrder"))
					transition(edgeName="t034",targetState="reachServiceDesk",cond=whenDispatch("orderReady"))
					transition(edgeName="t035",targetState="reachTableToCollect",cond=whenDispatch("readyToPay"))
					transition(edgeName="t036",targetState="reachTableToCollect",cond=whenDispatch("maxStayTime"))
				}	 
				state("unexpected") { //this:State
					action { //it:State
						println("---------------------------------------")
						println("Sorry, there is something wrong ...")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
