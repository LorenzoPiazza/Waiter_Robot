/* Generated by AN DISI Unibo */ 
package it.unibo.tester

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tester ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 var CT = 0L  
						delay(1000) 
						emit("local_startMaxstaytimeObserver", "local_startMaxstaytimeObserver(10000)" ) 
						CT = getCurrentTime()
						emit("local_consulting", "local_consulting(1,$CT)" ) 
						delay(5000) 
						CT = getCurrentTime()
						emit("local_preparation", "local_preparation(1,$CT)" ) 
						delay(8000) 
						CT = getCurrentTime()
						emit("local_consuming", "local_consuming(1,$CT)" ) 
					}
					 transition(edgeName="t06",targetState="alarm",cond=whenDispatch("maxStayTime"))
				}	 
				state("alarm") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("maxStayTime(CID,STATE)"), Term.createTerm("maxStayTime(CID,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("*****MAXSTAYTIME for client ${payloadArg(0)} while he's ${payloadArg(1)}!*****")
						}
					}
				}	 
			}
		}
}
